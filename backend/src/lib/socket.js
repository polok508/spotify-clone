import { Server } from "socket.io";
import { Message } from "../models/message.model.js";

export const initializeSocket = (server) => {
    const io = new Server(server, {
        cors: {
            origin: "http://localhost:3000",
            credentials: true,
        },
    });

    const userSockets = new Map();       // userId -> socketId
    const userActivities = new Map();    // userId -> activity string

    io.on("connection", (socket) => {
        console.log("‚úÖ New socket connection:", socket.id);

        socket.on("user_connected", (userId) => {
            userSockets.set(userId, socket.id);
            userActivities.set(userId, "Idle");

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const onlineUsers = Array.from(userSockets.keys());

            console.log("üü¢ Emitting users_online:", onlineUsers);

            // –í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω
            io.emit("users_online", onlineUsers);

            // –í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            io.emit("activities", Array.from(userActivities.entries()));

            console.log(`User connected: ${userId}, total online: ${userSockets.size}`);
        });

        socket.on("update_activity", ({ userId, activity }) => {
            console.log("üü¢ Activity updated:", userId, activity);
            userActivities.set(userId, activity);
            io.emit("activity_updated", { userId, activity });
        });

        socket.on("send_message", async (data) => {
            try {
                const { senderId, receiverId, content } = data;

                const message = await Message.create({
                    senderId,
                    receiverId,
                    content,
                });

                const receiverSocketId = userSockets.get(receiverId);
                if (receiverSocketId) {
                    io.to(receiverSocketId).emit("receive_message", message);
                }

                socket.emit("message_sent", message);

            } catch (error) {
                console.error("‚ùå Message error:", error);
                socket.emit("message_error", error.message);
            }
        });

        socket.on("disconnect", () => {
            let disconnectedUserId = null;

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socket.id –∏ —É–¥–∞–ª—è–µ–º –∏–∑ maps
            for (const [userId, socketId] of userSockets.entries()) {
                if (socketId === socket.id) {
                    disconnectedUserId = userId;
                    userSockets.delete(userId);
                    userActivities.delete(userId);
                    break;
                }
            }

            if (disconnectedUserId) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const onlineUsers = Array.from(userSockets.keys());
                console.log("üü¢ Emitting users_online after disconnect:", onlineUsers);

                // –í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω
                io.emit("users_online", onlineUsers);

                // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                io.emit("user_disconnected", disconnectedUserId);

                console.log("üîå User disconnected:", disconnectedUserId, `total online: ${userSockets.size}`);
            }
        });
    });
};